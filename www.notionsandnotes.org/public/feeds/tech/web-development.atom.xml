<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Notions and Notes</title><link href="http://www.notionsandnotes.org/" rel="alternate"></link><link href="http://www.notionsandnotes.org/feeds/tech/web-development.atom.xml" rel="self"></link><id>http://www.notionsandnotes.org/</id><updated>2015-04-10T00:00:00+02:00</updated><entry><title>How this blog was set up using Pelican</title><link href="http://www.notionsandnotes.org/tech/web-development/pelican-setup.html" rel="alternate"></link><updated>2015-04-10T00:00:00+02:00</updated><author><name>George S.</name></author><id>tag:www.notionsandnotes.org,2015-04-10:tech/web-development/pelican-setup.html</id><summary type="html">
&lt;p&gt;In this post it is documented how this blog was constructed using a static site maker, meaning, 
there is no server-side processing of data.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="why-a-static-site"&gt;Why a static site?&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;The three main reasons are, simplicity, control, and &lt;em&gt;because I can do it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Compared to wordpress, static sites in Markdown or other simple formatting languages such as 
&lt;a href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt;, are much simpler and much easier to control, and less susceptible 
to version changes. Pre-publication testing is easy and can be done offline. Deploying is simply copying the files
to a server. There is no &lt;span class="caps"&gt;PHP&lt;/span&gt; or database setup required. The hosting resources required are very small, allowing
one to use very cheap hosts such as &lt;a href="http://nearlyfreespeech.net"&gt;NearlyFreeSpeech&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Markdown is chosen because various math sites use it and &lt;a href="https://github.com/getpelican/pelican"&gt;pelican&lt;/a&gt; 
was chose because it is Pythonic. Python is  a language I was interested in at various times, 
and I do not have time to learn another language such as &lt;a href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt; to 
use alternate popular static site platforms such as &lt;a href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Also all this is very well-integrated with Linux, my favorite operating system.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="setting-up-pip-and-virtualenv"&gt;Setting up pip and virtualenv&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;It is expected that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user is proficient in Linux and the terminal. It is assumed in the following that we are working on an Ubuntu 14 installation.&lt;/li&gt;
&lt;li&gt;User is proficient in &lt;a href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html"&gt;bash&lt;/a&gt; and knows how to use &lt;a href="https://www.python.org"&gt;python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;User knows utilities such as &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, etc., and is familiar with web servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; is the python package installer. It takes care of all the Pythonic dependency hell. Use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$ sudo apt-get install -y python-pip python-virtualenv virtualenvwrapper&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We do not want to do any global python package installations from now onwards. The method is to use 
&lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/"&gt;virtual environments&lt;/a&gt; in which the user installs
packages inside a local directory and runs them through wrapper scripts. There can be multiple such environments and the user can switch back and forth between them, with parameters being different each time. This gives much flexibility for development.&lt;/p&gt;
&lt;p&gt;Now we create the &lt;code&gt;virtualenv&lt;/code&gt; named &lt;code&gt;pelican&lt;/code&gt; for our blogging purposes. The machine is named &lt;code&gt;soliloquy&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mkvirtualenv pelican&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Running virtualenv with interpreter /usr/bin/python2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;New python executable in pelican/bin/python2&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Also creating executable in pelican/bin/python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Installing setuptools, pip...done.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~$&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the change in the &lt;code&gt;bash&lt;/code&gt; prompt. Use &lt;code&gt;workon&lt;/code&gt; and &lt;code&gt;deactivate&lt;/code&gt; to activate/deactive the python environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$ workon pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~$ deactivate&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sequence will be part of the blogging workflow whenever required.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="installing-pelican-themes-and-plugins"&gt;Installing pelican, themes and plugins&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;Install &lt;code&gt;pelican&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$ mkdir ~/work/blog&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~$ cd ~/work/blog&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;~/work/blog$ workon pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ pip install pelican&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It downloads and install many packages and finishes with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;Successfully installed pelican jinja2 blinker pygments docutils python-dateutil pytz six feedgenerator unidecode markupsafe&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Cleaning up...&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have pelican installed!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican"&gt;&lt;img alt="Pelican" src="http://www.notionsandnotes.org/images/pelican.png" style="width: 200px; height: auto;"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Install additional packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ pip install Markdown beautifulsoup4 typogrify Pillow webassets&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create directory &lt;code&gt;pelican&lt;/code&gt; and run &lt;code&gt;pelican-quickstart&lt;/code&gt; to set up the pelican blogging platform inside it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ mkdir pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ pelican-quickstart &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Welcome to pelican-quickstart v3.5.0.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;This script will help you create a new Pelican-based website.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Please answer the following questions so this script can generate the files needed by Pelican.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Where do you want to create your new web site? [.] pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What will be the title of this web site? Notions and Notes&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Who will be the author of this web site? George S.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What will be the default language of this web site? [en] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://www.notionsandnotes.org&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to enable article pagination? (Y/n) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; How many articles per page do you want? [10] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using FTP? (y/N) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using SSH? (y/N) y&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What is the hostname of your SSH server? [localhost] notionsandnotes&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What is the port of your SSH server? [22] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; What is your username on that server? [root] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Where do you want to put your web site on that server? [/var/www] &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using Dropbox? (y/N) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using S3? (y/N) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;Done. Your new project is available at /home/george/work/blog/pelican&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that, here, the full details of the ssh server are not provided. In my case, it is stored instead
in the &lt;code&gt;~/.ssh/config&lt;/code&gt; file, as per &lt;a href="http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/"&gt;ssh config&lt;/a&gt;
directives. Replace it as necessary.&lt;/p&gt;
&lt;p&gt;We do typesetting using &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;. Under the &lt;code&gt;~/work/blog&lt;/code&gt; directory, we store the site files 
in various subdirectories of the directory &lt;code&gt;raw&lt;/code&gt;. The published site is stored under another 
directory &lt;code&gt;www.notionsandnotes.org&lt;/code&gt;. As mentioned earlier, &lt;code&gt;pelican&lt;/code&gt; directory stores the files
for pelican. So we have three subdirectories in total for the &lt;code&gt;blog&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Now set up these two additional directories and also initialize &lt;a href="http://git-scm.com/documentation"&gt;git&lt;/a&gt; to enable version control and rollbacks(if required):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ mkdir www.notionsandnotes.org&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ mv pelican/content ./raw&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git init .&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git add .&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git commit -m "Initial commit"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now to use pelican &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt;, clone these from github as &lt;a href="http://git-scm.com/book/en/v2/Git-Tools-Submodules"&gt;submodules&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ cd pelican&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git submodule add https://github.com/getpelican/pelican-themes.git themes &lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git submodule add https://github.com/getpelican/pelican-plugins.git plugins&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ cd ..&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="go"&gt;(pelican)~/work/blog$ git -commit -m "Themes+Plugins"&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr/&gt;
&lt;h3 id="configuration-file"&gt;Configuration file&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;There are two config files, &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. We mostly work with the latter. 
Both are python files. Set the following configuration directives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'./plugins'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'extract_toc'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'render_math'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'disqus_static'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'better_figures_and_images'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'codehilite'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'extra'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'smarty'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'toc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have included plugins for: &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/extract_toc"&gt;table of contents&lt;/a&gt;, &lt;a href="https://github.com/barrysteyn/pelican_plugin-render_math"&gt;LaTeX rendering of math&lt;/a&gt;, etc., and similar Markdown extensions are added too. The &lt;code&gt;toc&lt;/code&gt; Markdown extension
is for example required for the &lt;code&gt;extract_toc&lt;/code&gt; plugin. The “Better Figures and Images” plugin is taken &lt;a href="http://duncanlock.net/blog/2013/05/29/better-figures-images-plugin-for-pelican/"&gt;from Duncan Lock&lt;/a&gt;, 
whose site was most helpful for this pelican setup. Plugin &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/assets"&gt;assets&lt;/a&gt; is for 
minification of javascript etc..&lt;/p&gt;
&lt;p&gt;Now set the directives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'../raw'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'../www.notionsandnotes.org/'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'extra'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'images'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'pdfs'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'extra/robots.txt'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'robots.txt'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'extra/favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'favicon.ico'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="s"&gt;'extra/htaccess'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'.htaccess'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a &lt;a href="http://querbalken.net/add-favicon-to-my-adoption-of-pelican-theme-tuxlite_tbs-en.html"&gt;favicon&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican/wiki/Tips-n-Tricks"&gt;robots.txt&lt;/a&gt; as required. A &lt;a href="http://docs.getpelican.com/en/latest/tips.html"&gt;custom 404 page&lt;/a&gt; can be embedded via a
.htaccess configuration directive. &lt;a href="/404.html"&gt;This&lt;/a&gt; is ours!&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;built-texts&lt;/code&gt; theme and the following directives are added as data for it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'themes/built-texts'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;COLOPHON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;COLOPHON_TITLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'About'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;COLOPHON_CONTENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Mainly...."&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit the &lt;a href="http://www.gnu.org/software/make/manual/make.html"&gt;Makefile&lt;/a&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span class="nv"&gt;INPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/../raw&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nv"&gt;OUTPUTDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;/../www.notionsandnotes.org&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add in other parameters, such as the ssh hostname, as required.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="workflow"&gt;Workflow&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;First, enable the virtual environment ‘pelican’ using ‘workon’(and remember to ‘deactivate’ it later.
Posts are created and edited using plain text editors in files with *.md extensions, in Markdown format.
For example, these are the first few lines of the Markdown for this page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;Title: How this blog was set up using Pelican&lt;/span&gt;
&lt;span class="code-line"&gt;Date: 2015-04-10 &lt;/span&gt;
&lt;span class="code-line"&gt;Category: Tech&lt;/span&gt;
&lt;span class="code-line"&gt;Subcategory: Blogging&lt;/span&gt;
&lt;span class="code-line"&gt;Tags: pelican, python&lt;/span&gt;
&lt;span class="code-line"&gt;Slug: pelican-setup&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;[TOC]&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;**Table of contents**&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;[TOC]&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;In this post it is documented how this blog was constructed using a static &lt;/span&gt;
&lt;span class="code-line"&gt;site maker, meaning, there is no server-side processing of data.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More details are available at the &lt;a href="http://pelican.readthedocs.org/en/latest/quickstart.html"&gt;Pelican Documentation&lt;/a&gt;
website. The whole source of this website is uploaded to &lt;a href="https://github.com/notionsandnotes/notionsandnotes.org"&gt;a github repository&lt;/a&gt;
where more examples and details may be found.&lt;/p&gt;
&lt;p&gt;After the articles or pages are edited, the compilation and static site generation are done by &lt;code&gt;make html&lt;/code&gt;.
Running &lt;code&gt;make devserver&lt;/code&gt; will fire up a local server at &lt;code&gt;http://localhost:8000&lt;/code&gt;, which can be used for
pre-publication viewing. Note that this will require fixing up of the &lt;code&gt;pelicanconf.py&lt;/code&gt; file in addition 
to &lt;code&gt;publishconf.py&lt;/code&gt; which was edited earlier. In particular, relative URLs to be enabled in pre-publication
mode in order for us to be able to follow links in the browser. &lt;/p&gt;
&lt;p&gt;After viewing, &lt;code&gt;Ctrl + C&lt;/code&gt; will stop the server and return to shell.&lt;/p&gt;
&lt;p&gt;For publication, run &lt;code&gt;make publish&lt;/code&gt;, and later upload via &lt;code&gt;make rsync_upload&lt;/code&gt;, which uploads only the
necessary files using 
&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories-on-a-vps"&gt;rsync&lt;/a&gt; + ssh.&lt;/p&gt;
&lt;hr/&gt;
&lt;h3 id="screenshots"&gt;Screenshots:&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;Here are the screen captures of a first built of this site with a (slightly modified) built-texts theme, with some 
&lt;a href="http://www.w3.org/Style/CSS/Overview.en.html"&gt;css&lt;/a&gt; additions.
The captures were done using a &lt;a href="http://mrcoles.com/full-page-screen-capture-chrome-extension/"&gt;Google Chrome extension by Peter Cole&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Index page screenshot:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.notionsandnotes.org/images/screenshot-index-bt.png"&gt;&lt;img alt="index.html" src="http://www.notionsandnotes.org/images/screenshot-index-bt-thumb.png" style="width: 400px; height: auto;"/&gt;&lt;/a&gt; 
Click for expanding the thumbnail to actual size.&lt;/p&gt;
&lt;p&gt;Below is the next screenshot of how the article on Lebesgue measure and construction via Caratheodory extension theorem,
was rendered. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.notionsandnotes.org/images/screenshot-index-bt.png"&gt;&lt;img alt="index.html" src="http://www.notionsandnotes.org/images/screenshot-lebesgue-bt-thumb.png" style="width: 400px; height: auto;"/&gt;&lt;/a&gt;
Click for actual size image.&lt;/p&gt;</summary><category term="pelican"></category><category term="python"></category></entry></feed>